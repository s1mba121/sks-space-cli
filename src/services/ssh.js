const { Client } = require("ssh2");
const { execSync } = require("child_process");
const chalk = require("chalk");

const log = {
  info: (msg) => console.log(`${chalk.cyan("i")}  ${msg}`),
  success: (msg) => console.log(`${chalk.green("‚úî")}  ${msg}`),
  warn: (msg) => console.log(`${chalk.yellow("~")}  ${msg}`),
  error: (msg) => console.log(`${chalk.red("‚úó")}  ${msg}`),
  section: (msg) => console.log(chalk.whiteBright(`\n=== ${msg} === \n`)),
};

// ==========================
// üîß –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SSH-–∫–æ–º–∞–Ω–¥
// ==========================
function runSSHCommand(conn, command) {
  return new Promise((resolve, reject) => {
    conn.exec(command, (err, stream) => {
      if (err) return reject(err);
      stream.on("close", (code) => {
        resolve(code === 0);
      });
    });
  });
}

// ==========================
// üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —Ç–∏–ø—É –ø—Ä–æ–µ–∫—Ç–∞
// ==========================
async function setupServer(ip, username, password, type) {
  const baseCmd = (cmd) =>
    `sshpass -p '${password}' ssh -o StrictHostKeyChecking=no ${username}@${ip} "${cmd}"`;

  const createDirs = {
    spa: ["mkdir -p /var/www/spa"],
    node: ["mkdir -p /var/www/node"],
    static: ["mkdir -p /var/www/static"],
  };

  const commands = createDirs[type];

  if (!commands) {
    log.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: spa, node, static.");
    return;
  }

  log.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...");

  try {
    for (const cmd of commands) {
      execSync(baseCmd(cmd), { stdio: "ignore" });
    }
    log.success("–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.");
  } catch (err) {
    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–µ—Ä–≤–µ—Ä–∞.");
    throw err;
  }
}

// ==========================
// üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
// ==========================
function testConnection(ip, username, password) {
  return new Promise((resolve) => {
    const conn = new Client();

    conn
      .on("ready", () => {
        conn.end();
        resolve(true);
      })
      .on("error", (err) => {
        log.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err.message);
        resolve(false);
      })
      .connect({
        host: ip,
        username,
        password,
        readyTimeout: 5000,
      });
  });
}

// ==========================
// üíª –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –∫–ª—é—á–æ–º
// ==========================
function sshConnect(ip, username) {
  const { spawn } = require("child_process");
  spawn("ssh", [`${username}@${ip}`], { stdio: "inherit" });
}

function sshConnectWithKey(ip, username, command) {
  const sshCommand = `ssh -o StrictHostKeyChecking=no ${username}@${ip} "${command}"`;
  execSync(sshCommand, { stdio: "inherit" });
}

// ==========================
// üì§ –≠–∫—Å–ø–æ—Ä—Ç
// ==========================
module.exports = {
  testConnection,
  setupServer,
  sshConnect,
  sshConnectWithKey,
};
