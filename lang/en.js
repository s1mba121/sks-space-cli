// lang/en.js
module.exports = {
    CONNECT_DESCRIPTION: "Connect to the server",
    INIT_DESCRIPTION: "Initialize the project with deployment configuration",
    DEPLOY_DESC: "Manage the app deployment",
    USAGE: "Usage:",
    OPTIONS: "Options:",
    COMMANDS: "Commands:",
    NEED_CONNECT:
        "Server connection is not established. Use the command `space connect`.",
    RESET_CONNECTIN: "Reset configuration before connecting",
    TEST_CONNECTION: "Test server availability",
    CHECK_DESCRIPTION: "Check the status of services on the server",
    UPTIME_DESCRIPTION: "Get server uptime",
    DISK_DESCRIPTION: "Check disk usage on the server",
    REBOOT_DESCRIPTION: "Reboot the server",
    CLEANUP_DESCRIPTION: "Clean up temporary files on the server",
    UPDATE_DESCRIPTION: "Update the project",
    MEM_DESCRIPTION: "Check memory usage on the server",
    DEPLOY_DESCRIPTION: "Manage app deployment",
    START_DESCRIPTION: "Start the app on the server",
    STOP_DESCRIPTION: "Stop the app on the server",
    RELOAD_DESCRIPTION: "Restart the app on the server",
    LANGUAGE_SWITCH_SUCCESS: (langCode) =>
        `Language switched to ${langCode.toUpperCase()}`,
    LANGUAGE_SWITCH_ERROR: "Unsupported language. Use 'En' or 'Ru'.",

    RSYNC_INSTALLING: "rsync not found. Installing...",
    RSYNC_UNSUPPORTED:
        "Auto-installation of rsync is not supported on this system. Please install it manually.",
    RSYNC_FAILED: "Failed to install rsync automatically",
    DEPLOY_START: (project, ip) =>
        `Deploying project ${project} to server ${ip}`,
    RUNNING_PREDEPLOY: (cmd) => `Running preDeploy command: ${cmd}`,
    REMOVING_OLD_DIR: (path) => `Removing old directory on server: ${path}`,
    SCRIPT_GENERATED: "The start-server.sh script has been generated.",
    SCANNING_FILES: "Scanning files for upload...",
    UPLOADING_FILES: (count) => `Uploading ${count} file(s):`,
    UPLOADING_ENV: "Uploading .env file...",
    RESTARTING_SERVER: (port) => `Restarting http-server on port ${port}...`,
    RUNNING_POSTDEPLOY: (cmd) => `Running postDeploy command: ${cmd}`,
    DEPLOY_SUCCESS: "Project deployed successfully!",
    ACCESSIBLE_AT: (url) => `Accessible at: ${url}`,

    RELOAD_MESSAGE: "Reloading the application...",

    CONFIG_NOT_FOUND: (env) => `.space.${env}.json configuration not found`,
    SERVER_STARTED: (port) => `Server started on port ${port}`,
    SERVER_STOPPED: (port) => `Server stopped on port ${port}`,
    SERVER_START_FAILED: (msg) => `Failed to start server: ${msg}`,
    SERVER_STOP_FAILED: (msg) => `Failed to stop server: ${msg}`,

    CLEANUP_CONFIG_ERROR: "Failed to load configuration or connection data.",
    CLEANUP_PASSWORD_ERROR: "Password not found. Check SSH settings.",
    CLEANUP_START: "Cleaning up logs and temporary files...",

    REBOOT_CONFIG_ERROR: "Failed to load configuration or connection data.",
    REBOOT_PASSWORD_ERROR: "Failed to retrieve password. Check SSH settings.",
    REBOOT_START: "Rebooting the server...",
    REBOOT_EXEC_ERROR: "Error during reboot",

    UPDATE_CONFIG_ERROR: "Failed to load configuration or connection data.",
    UPDATE_PASSWORD_ERROR: "Password not found. Check SSH settings.",
    UPDATE_START: "Updating packages on the server...",
    UPDATE_COMMAND_ERROR: "Error while running the command",
    UPDATE_DONE: "Update complete.",

    CHECK_CONFIG_ERROR: "Failed to load configuration or connection data.",
    CHECK_PASSWORD_ERROR: "Password not found. Check SSH settings.",
    CHECK_START: "Checking service status...",
    CHECK_COMMAND_ERROR: "Error while running the command",
    CHECK_SERVICES_OK: "Services are running fine.",
    CHECK_SERVICES_ISSUE: "Issues detected with services:",
    CHECK_DONE: "Check complete.",

    DISK_CONFIG_ERROR: "Failed to load configuration or connection data.",
    DISK_PASSWORD_ERROR: "Password not found. Check SSH settings.",
    DISK_CHECK_START: "Checking disk usage...",
    DISK_COMMAND_ERROR: "Error while fetching disk info",
    DISK_DONE: "Check complete.",

    MEM_CONFIG_ERROR: "Failed to load configuration or connection data.",
    MEM_PASSWORD_ERROR: "Password not found. Check SSH settings.",
    MEM_CHECK_START: "Checking memory usage...\n",
    MEM_COMMAND_ERROR: "Error while fetching memory info",
    MEM_DONE: "Check complete.",

    PING_CONFIG_ERROR: "Failed to load configuration or connection data.",
    PING_PASSWORD_ERROR: "Password not found. Check SSH settings.",
    PING_CHECK_START: "Checking server availability...",
    PING_COMMAND_ERROR: "Ping error",
    PING_SERVER_OK: "Server is available.",
    PING_SERVER_FAIL: "Server is unavailable.",

    UPTIME_CONFIG_ERROR: "Failed to load configuration or connection data.",
    UPTIME_PASSWORD_ERROR: "Password not found. Check SSH settings.",
    UPTIME_CHECK_START: "Checking server uptime...",
    UPTIME_COMMAND_ERROR: "Error while fetching uptime",

    RESET_SUCCESS: "Configuration and password reset.",

    BUILD_PROJECT: "Building the project",
    BUILD_ERROR: "Build failed",
    BUILD_SUCCESS: "Build successful",

    CONFIG_SAVED: "Configuration saved",
    CONFIG_SAVE_ERROR: "Error saving configuration",
    CONFIG_NOT_FOUND_2: "Configuration file not found",
    CONFIG_FILE_CORRUPTED: "Configuration file corrupted",
    CONFIG_IGNORE: "Ignoring corrupted file",
    CONFIG_DELETED: "Configuration deleted",
    CONFIG_DELETE_ERROR: "Error deleting configuration",

    UNKNOWN_PROJECT_TYPE:
        "Unknown project type. Available types: spa, node, static.",
    SETTING_UP_SERVER: "Setting up the server...",
    SERVER_SETUP_SUCCESS: "Server successfully set up.",
    SERVER_SETUP_ERROR: "Error setting up the server.",
    CONNECTION_ERROR: "Connection error",

    INIT_PROJECT_DESC: "Initialize a project with deployment configuration",
    SELECT_ENV: "Which environment are we setting up?",
    DEV_ENV: "Development (dev)",
    PROD_ENV: "Production (prod)",
    FILE_EXISTS: "File already exists.",
    OVERWRITE_CONFIRM: "Overwrite?",
    CANCEL_INIT: "Initialization canceled.",
    PROMPT_IP: "Server IP:",
    PROMPT_USER: "Username:",
    PROMPT_PROJECT_NAME: "Project name:",
    PROMPT_PROJECT_TYPE: "Project type:",
    SPA_TYPE: "Single Page App (React/Vue)",
    NODE_TYPE: "Node.js Backend",
    STATIC_TYPE: "Static site",
    PROMPT_LOCAL_PATH: "Path to project folder (on your local machine):",
    PROMPT_REMOTE_PATH: "Remote path on server:",
    PROMPT_PRE_DEPLOY: "Pre-deploy command (e.g., build):",
    PROMPT_POST_DEPLOY: "Post-deploy command (e.g., clear cache):",
    PROMPT_LOAD_ENV: "Load environment variables from .env?",
    PROMPT_NGINX_CONFIGURED: "Is Nginx already configured?",
    PROMPT_NGINX_SETUP: "Set up Nginx for the project?",
    PROMPT_DOMAIN: "Domain (e.g., example.com):",
    PROMPT_SUBDOMAIN: "Subdomain (e.g., dev):",
    PROMPT_PORT: "Port for local server:",
    PROMPT_SSL: "Use SSL (for production):",
    NGINX_CONFIG_SAVED: "Nginx configuration saved in",
    CONFIG_CREATED: "Configuration saved!",
};
